generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  email               String        @unique
  name                String?
  password            String
  image               String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  membership          Membership    @default(FREE)
  bio                 String?
  avatarUrl           String?
  emailVerified       Boolean       @default(false)
  isAdmin             Boolean       @default(false)
  lastLogin           DateTime?
  preferences         Json?
  dateOfBirth         DateTime?
  gender              Gender?
  isVerified          Boolean       @default(false)
  phoneNumber         String?
  country             String?
  city                String?
  documentUrl         String?
  documentType        String?
  verificationNotes   String?
  comments            Comment[]
  participatingEvents Participant[]
  reviews             Review[]
  waitlists           Waitlist[]
  eventsBookmarked    Event[]       @relation("EventBookmarks")
  eventsJoined        Event[]       @relation("EventParticipants")
}

model Category {
  id            String        @id @default(cuid())
  name          String
  description   String
  icon          String
  color         String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  events        Event[]
  subcategories SubCategory[]
}

model SubCategory {
  id          String   @id @default(cuid())
  name        String
  description String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Event[]
  category    Category @relation(fields: [categoryId], references: [id])
}

model Location {
  id          String   @id @default(cuid())
  name        String
  description String
  city        String?
  zone        String?
  address     String?
  capacity    Int?
  price       String?
  features    String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  url         String?  @unique
  events      Event[]  @relation("EventToLocation")
  images      Image[]
}

model Image {
  id            String   @id @default(cuid())
  url           String
  localPath     String
  locationId    String
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt @db.Timestamp(6)
  cloudinaryUrl String?
  location      Location @relation(fields: [locationId], references: [id])
}

model Event {
  id                 String          @id @default(cuid())
  title              String
  description        String
  locationDetails    String?
  date               DateTime
  maxParticipants    Int
  price              Float
  image              String?
  visibility         EventVisibility @default(INVITATION)
  revealType         RevealType      @default(LAST_MINUTE)
  tags               String[]
  entryPolicy        EntryPolicy     @default(STANDARD)
  entryRatio         Float?
  minRequiredMen     Int?
  minRequiredWomen   Int?
  entryPolicyDetails String?
  hostId             String?
  categoryId         String
  subcategoryId      String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  isPrivate          Boolean         @default(true)
  status             String          @default("upcoming")
  amenities          String[]
  capacity           Int             @default(100)
  dress_code         String?
  featured           Boolean         @default(false)
  gallery            String[]
  locationId         String?
  locationString     String?
  luxuryLevel        Int             @default(3)
  minimumAge         Int             @default(18)
  womenPrice         Float?
  comments           Comment[]
  category           Category        @relation(fields: [categoryId], references: [id])
  locationObj        Location?       @relation("EventToLocation", fields: [locationId], references: [id])
  subcategory        SubCategory     @relation(fields: [subcategoryId], references: [id])
  participantsList   Participant[]
  reviews            Review[]
  waitlist           Waitlist[]
  bookmarks          User[]          @relation("EventBookmarks")
  participants       User[]          @relation("EventParticipants")
}

model Waitlist {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Participant {
  userId    String
  eventId   String
  status    String   @default("registered")
  joinedAt  DateTime @default(now())
  isVisible Boolean  @default(true)
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, eventId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  code      String   @unique
  eventId   String?
  status    String   @default("pending")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Membership {
  FREE
  SILVER
  GOLD
  PLATINUM
}

enum EventVisibility {
  PUBLIC
  MEMBERS
  INVITATION
  FOUNDER
}

enum RevealType {
  IMMEDIATE
  LAST_MINUTE
  HOURS_24
}

enum EntryPolicy {
  STANDARD
  WOMEN_FREE
  MEN_FREE
  WOMEN_ONLY
  MEN_ONLY
  RATIO_REQUIRED
  DIFFERENT_PRICES
}
